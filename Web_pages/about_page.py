import streamlit as st


def about_page():
    """About Page for Weather Analysis Web Application"""
    st.title("About This Application")
    st.write("""
    ## Weather Analysis and Prediction
    Welcome to the **Weather Analysis and Prediction Application** â€“ a comprehensive platform for analyzing and predicting weather parameters using **Machine Learning models**.
    """)

    st.write("""
    ### Overview
    This application combines advanced statistical and machine learning models to forecast critical weather features such as:
    - **Mean Temperature**
    - **Feels-Like Temperature**
    - **Total Precipitation**
    - **Daylight Duration**
    - **Max Wind Speed**

    The application allows users to:
    - Train and generate predictions using **LSTM**, **ARIMA**, and **SARIMA** models.
    - Perform **stationarity checks** for ARIMA/SARIMA models.
    - Compare forecasts across all three models.
    """)

    st.write("""
    ---
    ### Key Features

    #### 1. **LSTM Model (Long Short-Term Memory)**
    - LSTM is a deep learning model optimized for time-series data.
    - **Features**:
        - Forecasts weather parameters up to **30 future days**.
        - Displays **Train Loss** and **Test Loss** to evaluate performance.
        - Predictions are saved in the `LSTM_Predictions` directory.

    #### 2. **ARIMA Model (AutoRegressive Integrated Moving Average)**
    - ARIMA is a statistical model suitable for non-seasonal time-series forecasting.
    - **Features**:
        - Performs **stationarity checks** using the **ADF Test**.
        - Forecasts weather parameters with Mean Squared Error (MSE).
        - Saves predictions and model summaries in `ARIMA_Predictions` and `ARIMA_Summary`.

    #### 3. **SARIMA Model (Seasonal ARIMA)**
    - SARIMA extends ARIMA by including **seasonality** in time-series forecasting.
    - **Features**:
        - Forecasts periodic weather trends with seasonality (e.g., annual cycles).
        - Calculates Mean Squared Error (MSE) for accuracy evaluation.
        - Saves predictions and summaries in `SARIMA_Predictions` and `SARIMA_Summary`.

    #### 4. **Model Comparison**
    - Compare predictions generated by LSTM, ARIMA, and SARIMA models.
    - **Features**:
        - Side-by-side comparison in table format.
        - Visualize forecasts with intuitive **line plots** for easier analysis.

    ---
    ### Workflow
    1. **Select a City**: Choose a dataset containing weather data.
    2. **Train Models**:
        - Select ARIMA, SARIMA, or LSTM models.
        - View forecasts, metrics (like MSE for ARIMA/SARIMA), and graphs.
    3. **Model Comparison**: Compare results from all three models on a single page.

    ---
    ### Data Management
    - **Predictions** are saved to:
        - `LSTM_Predictions`, `ARIMA_Predictions`, and `SARIMA_Predictions` folders.
    - **Summaries** are saved to:
        - `LSTM_Summary`, `ARIMA_Summary`, and `SARIMA_Summary` directories.
    """)

    st.write("""
    ---
    ### Weather Features Analyzed
    - **Mean Temperature**: Average daily temperature.
    - **Feels-Like Temperature**: Apparent temperature adjusted for wind and humidity.
    - **Total Precipitation**: Daily cumulative rainfall.
    - **Daylight Duration**: Total duration of sunlight in seconds.
    - **Max Wind Speed**: Highest wind speed recorded in a day.

    ---
    ### Conclusion
    This application provides an interactive and user-friendly platform for weather forecasting. Combining both traditional statistical models and modern machine learning techniques, the tool helps users analyze, forecast, and compare weather trends effectively.
    """)

    st.write("Thank you for using this application! ðŸš€")